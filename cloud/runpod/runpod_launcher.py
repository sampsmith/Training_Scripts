#!/usr/bin/env python3
"""
RunPod Launcher - All-in-One Training Solution
==============================================

This script provides a complete training solution for RunPod with:
- Automatic setup
- Dataset validation
- Optimal configuration
- Easy training launch

Usage:
    python runpod_launcher.py
"""

import os
import sys
import subprocess
import json
from pathlib import Path


def print_banner():
    """Print welcome banner"""
    print("=" * 70)
    print("🚀 RUNPOD OBJECT DETECTION TRAINING LAUNCHER")
    print("=" * 70)
    print("Complete training solution for RunPod cloud infrastructure")
    print("=" * 70)


def check_requirements():
    """Check if requirements are installed"""
    print("\n📦 Checking requirements...")
    
    required_packages = [
        "torch", "torchvision", "opencv-python", "numpy", 
        "tqdm", "Pillow", "matplotlib", "pyyaml", "roboflow"
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"✅ {package}")
        except ImportError:
            missing.append(package)
            print(f"❌ {package}")
    
    if missing:
        print(f"\n⚠️  Missing packages: {', '.join(missing)}")
        install = input("Install missing packages? (y/N): ").strip().lower()
        if install in ['y', 'yes']:
            print("Installing packages...")
            subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing)
            print("✅ Installation complete!")
        else:
            print("❌ Cannot proceed without required packages.")
            return False
    
    return True


def get_training_config():
    """Get training configuration from user"""
    print("\n⚙️  Training Configuration")
    print("-" * 40)
    
    # Dataset path
    while True:
        data_dir = input("📁 Dataset path: ").strip()
        if os.path.exists(data_dir):
            break
        print("❌ Path does not exist. Please try again.")
    
    # Output path
    output_dir = input("📁 Output directory (default: ./outputs): ").strip()
    if not output_dir:
        output_dir = "./outputs"
    
    # Training parameters
    try:
        epochs = int(input("🔄 Epochs (default: 50): ") or "50")
        patience = int(input("⏹️  Patience (default: 10): ") or "10")
        batch_size = int(input("📦 Target batch size (default: 16): ") or "16")
    except ValueError:
        print("❌ Invalid input. Using defaults.")
        epochs, patience, batch_size = 50, 10, 16
    
    return {
        "data_dir": data_dir,
        "output_dir": output_dir,
        "epochs": epochs,
        "patience": patience,
        "target_effective_batch_size": batch_size
    }


def validate_dataset(data_dir):
    """Validate dataset structure"""
    print(f"\n🔍 Validating dataset at: {data_dir}")
    
    required_splits = ["train", "valid"]
    found_format = None
    
    for split in required_splits:
        split_dir = os.path.join(data_dir, split)
        if not os.path.exists(split_dir):
            print(f"❌ Missing {split} directory")
            return False
        
        # Check for COCO format
        coco_ann = os.path.join(split_dir, "_annotations.coco.json")
        if os.path.exists(coco_ann):
            found_format = "COCO"
            print(f"✅ Found COCO format in {split}")
            continue
        
        # Check for VOC format
        xml_files = [f for f in os.listdir(split_dir) if f.endswith('.xml')]
        if xml_files:
            found_format = "VOC"
            print(f"✅ Found VOC format in {split}")
            continue
        
        print(f"❌ No valid annotations found in {split}")
        return False
    
    print(f"✅ Dataset format: {found_format}")
    return True


def create_training_script(config):
    """Create a customized training script"""
    script_content = f'''#!/usr/bin/env python3
"""
Auto-generated training script for RunPod
Generated by runpod_launcher.py
"""

import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from runpod_train import RunPodConfig, RunPodTrainer

def main():
    # Configuration
    config = RunPodConfig(
        data_dir="{config['data_dir']}",
        output_dir="{config['output_dir']}",
        epochs={config['epochs']},
        patience={config['patience']},
        target_effective_batch_size={config['target_effective_batch_size']},
        pretrained_weights="COCO",
        trainable_backbone_layers=3,
        use_amp=True,
        grad_clip=1.0,
        num_workers=4,
        pin_memory=True,
        device="cuda" if os.system("nvidia-smi > /dev/null 2>&1") == 0 else "cpu"
    )
    
    # Start training
    trainer = RunPodTrainer(config)
    trainer.train()

if __name__ == "__main__":
    main()
'''
    
    script_path = "train_custom.py"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    os.chmod(script_path, 0o755)  # Make executable
    return script_path


def main():
    """Main launcher function"""
    print_banner()
    
    # Check requirements
    if not check_requirements():
        return
    
    # Get configuration
    config = get_training_config()
    
    # Validate dataset
    if not validate_dataset(config['data_dir']):
        print("❌ Dataset validation failed. Please check your dataset structure.")
        return
    
    # Create output directory
    os.makedirs(config['output_dir'], exist_ok=True)
    
    # Create custom training script
    script_path = create_training_script(config)
    print(f"✅ Created training script: {script_path}")
    
    # Show final configuration
    print("\n📋 Final Configuration:")
    print("-" * 40)
    for key, value in config.items():
        print(f"  {key}: {value}")
    
    # Confirm and start
    print(f"\n🚀 Ready to start training!")
    confirm = input("Start training now? (y/N): ").strip().lower()
    
    if confirm in ['y', 'yes']:
        print("\n🏃 Starting training...")
        try:
            subprocess.run([sys.executable, script_path], check=True)
            print("\n✅ Training completed successfully!")
        except subprocess.CalledProcessError as e:
            print(f"\n❌ Training failed with error: {e}")
        except KeyboardInterrupt:
            print("\n❌ Training interrupted by user.")
    else:
        print(f"\n📝 To start training later, run: python {script_path}")


if __name__ == "__main__":
    main()
